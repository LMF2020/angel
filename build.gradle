apply plugin : 'war'
apply plugin : 'jetty'
apply plugin : 'eclipse-wtp'
apply plugin : 'idea'
//apply plugin: 'tomcat'

repositories {  //自定义maven仓库
	maven { url 'http://127.0.0.1:7070/nexus/content/groups/public/' }
	mavenCentral()
	mavenLocal()			//直接从Maven仓库查找依赖包
}

//指定编码格式
[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'} 

//防止jetty服务启动静态文件被锁定
[jettyRun, jettyRunWar,jettyStop]*.with {webDefaultXml = file("${project.webAppDir}/WEB-INF/webdefault.xml")}

//def encoding = {it.encoding = 'UTF-8'}

def library(lib, v) {
    String.format(lib, versions[v]);
}

// 定义 依赖和版本的变量
libraries=[:]
versions=[:]

// 设置版本信息
versions['spring'] = '3.2.2.RELEASE'
versions['common-dao'] = '2.0.0-SNAPSHOT'

libraries['log4j'] = 'log4j:log4j:1.2.17'
libraries['alibaba'] = 'com.alibaba:fastjson:1.1.40'
libraries['druid'] = 'com.alibaba:druid:0.2.14'
libraries['slf4j'] = 'org.slf4j:slf4j-api:1.6.1'
libraries['commons-lang3'] = 'org.apache.commons:commons-lang3:3.1'   
libraries['commons-fileupload'] = 'commons-fileupload:commons-fileupload:1.2.2'
// Jackson
libraries['codehaus-jackson'] = 'org.codehaus.jackson:jackson-mapper-asl:1.9.10'
libraries['jackson-databind'] = 'com.fasterxml.jackson.core:jackson-databind:2.1.0'
libraries['jackson-module-jaxb-annotations'] = 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.1.0'
libraries['jaxb-api'] = 'javax.xml.bind:jaxb-api:2.2.2'
libraries['mysql5'] = 'mysql:mysql-connector-java:5.1.21'
libraries['hibernate4'] = 'org.hibernate:hibernate-core:4.1.9.Final'
libraries['xstream'] = 'com.thoughtworks.xstream:xstream:1.3.1'
libraries['poi'] = 'org.apache.poi:poi:3.10-FINAL'
libraries['poi-ooxm'] = 'org.apache.poi:poi-ooxml:3.10-FINAL'

//common-dao(by_bsli)
libraries += [
    'tp-common-dao':             library('com.starit.common.dao:tp.common.dao:%s',             'common-dao')
]

//spring-*
libraries += [
    'spring-aop':             library('org.springframework:spring-aop:%s',             'spring'),
    'spring-aspects':         library('org.springframework:spring-aspects:%s',         'spring'),
    'spring-beans':           library('org.springframework:spring-beans:%s',           'spring'),
    'spring-core':            library('org.springframework:spring-core:%s',            'spring'),
    'spring-context':         library('org.springframework:spring-context:%s',         'spring'),
    'spring-context-support': library('org.springframework:spring-context-support:%s', 'spring'),
    'spring-expression':      library('org.springframework:spring-expression:%s',      'spring'),
    'spring-jdbc':            library('org.springframework:spring-jdbc:%s',            'spring'),
    'spring-orm':             library('org.springframework:spring-orm:%s',             'spring'),
    'spring-tx':              library('org.springframework:spring-tx:%s',              'spring'),
    'spring-web':             library('org.springframework:spring-web:%s',             'spring'),
    'spring-webmvc':          library('org.springframework:spring-webmvc:%s',          'spring'),
    'spring-oxm':          	library('org.springframework:spring-oxm:%s',             'spring')
]

dependencies {

	compile group: 'opensymphony', name: 'sitemesh', version: '2.4.2'
	
	 libraries.each { k,v ->
        compile(libraries[k])
    }
	
	//引用本地jar包,报表插件开发需要配置本地包
	//runtime files('libs/a.jar', 'libs/b.jar')
    //runtime fileTree(dir: 'libs', include: '*.jar')
	//runtime files('E:\\maven\\repo\\com\\starit\\common\\dao\\tp.common.dao\\2.0.0-SNAPSHOT\\tp.common.dao-2.0.0-SNAPSHOT.jar')
 	// Servlet
    providedRuntime 'javax.servlet:servlet-api:2.5'
    providedRuntime 'javax.servlet.jsp:jsp-api:2.1'
    compile('javax.servlet.jsp.jstl:jstl-api:1.2'){
         exclude(group: 'javax.el', module: 'el-api')
    }
    
    // Test
    testCompile library('org.springframework:spring-test:%s','spring')
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
    
   //tomcat 插件的配置
   /* 
   	def tomcatVersion = '7.0.11'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }*/
    
    
}

task showMeCache << {  //显示 Gradle 仓库的目录
  configurations.compile.each { println it }
}



//Tomcat插件的配置
/*
	tomcat {
	    httpPort = 8081
	    stopPort = 9966
	    //httpsPort = 8091
	    //enableSSL = true
	}
	tomcatRun{
	    contextPath= 'angel'
	    URIEncoding= 'UTF-8'
	    reloadable = 'true'
	}
*/

//tomcat 插件的配置
/*
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.3'
    }
}*/


//jetty插件的配置
jettyRun {
  reload ="automatic"
  scanIntervalSeconds = 10
  contextPath = 'angel'
}
httpPort=8081
[jettyRun, jettyRunWar, jettyStop]*.stopPort = 9966
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'
